# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import generated.protos.schedule.schedule_pb2 as schedule__pb2

GRPC_GENERATED_VERSION = "1.71.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in schedule_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ScheduleServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSingleSchedule = channel.unary_unary(
            "/schedule.ScheduleServer/GetSingleSchedule",
            request_serializer=schedule__pb2.GetSingleScheduleRequest.SerializeToString,
            response_deserializer=schedule__pb2.GetSingleScheduleResponse.FromString,
            _registered_method=True,
        )
        self.CreateSingleSchedule = channel.unary_unary(
            "/schedule.ScheduleServer/CreateSingleSchedule",
            request_serializer=schedule__pb2.CreateSingleScheduleRequest.SerializeToString,
            response_deserializer=schedule__pb2.CreateSingleScheduleResponse.FromString,
            _registered_method=True,
        )
        self.GetSchedulesList = channel.unary_unary(
            "/schedule.ScheduleServer/GetSchedulesList",
            request_serializer=schedule__pb2.UserIdRequest.SerializeToString,
            response_deserializer=schedule__pb2.GetSchedulesListResponse.FromString,
            _registered_method=True,
        )
        self.GetNextTakings = channel.unary_unary(
            "/schedule.ScheduleServer/GetNextTakings",
            request_serializer=schedule__pb2.UserIdRequest.SerializeToString,
            response_deserializer=schedule__pb2.GetNextTakingsResponse.FromString,
            _registered_method=True,
        )


class ScheduleServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSingleSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateSingleSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSchedulesList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNextTakings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ScheduleServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetSingleSchedule": grpc.unary_unary_rpc_method_handler(
            servicer.GetSingleSchedule,
            request_deserializer=schedule__pb2.GetSingleScheduleRequest.FromString,
            response_serializer=schedule__pb2.GetSingleScheduleResponse.SerializeToString,
        ),
        "CreateSingleSchedule": grpc.unary_unary_rpc_method_handler(
            servicer.CreateSingleSchedule,
            request_deserializer=schedule__pb2.CreateSingleScheduleRequest.FromString,
            response_serializer=schedule__pb2.CreateSingleScheduleResponse.SerializeToString,
        ),
        "GetSchedulesList": grpc.unary_unary_rpc_method_handler(
            servicer.GetSchedulesList,
            request_deserializer=schedule__pb2.UserIdRequest.FromString,
            response_serializer=schedule__pb2.GetSchedulesListResponse.SerializeToString,
        ),
        "GetNextTakings": grpc.unary_unary_rpc_method_handler(
            servicer.GetNextTakings,
            request_deserializer=schedule__pb2.UserIdRequest.FromString,
            response_serializer=schedule__pb2.GetNextTakingsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "schedule.ScheduleServer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "schedule.ScheduleServer", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class ScheduleServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSingleSchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/schedule.ScheduleServer/GetSingleSchedule",
            schedule__pb2.GetSingleScheduleRequest.SerializeToString,
            schedule__pb2.GetSingleScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateSingleSchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/schedule.ScheduleServer/CreateSingleSchedule",
            schedule__pb2.CreateSingleScheduleRequest.SerializeToString,
            schedule__pb2.CreateSingleScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetSchedulesList(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/schedule.ScheduleServer/GetSchedulesList",
            schedule__pb2.UserIdRequest.SerializeToString,
            schedule__pb2.GetSchedulesListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNextTakings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/schedule.ScheduleServer/GetNextTakings",
            schedule__pb2.UserIdRequest.SerializeToString,
            schedule__pb2.GetNextTakingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
